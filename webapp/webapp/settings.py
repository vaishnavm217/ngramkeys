"""
Django settings for webapp project.

Generated by 'django-admin startproject' using Django 2.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/2.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.1/ref/settings/
"""

import os
from whoosh.index import create_in,exists_in
from whoosh.index import open_dir
from whoosh.fields import *
from whoosh.analysis import SimpleAnalyzer
# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
import re

def only_letters(tested_string):
    match = re.match("^[ABCDEFGHJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz]*$", tested_string)
    return match is not None
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
WHOOSH_INDEX = os.path.join(BASE_DIR,"indexes")
WHOOSH_FILES = os.path.join(BASE_DIR,"Files")
WHOOSH_INDEXES = ['wiki','blog','twitter','news']
WHOOSH_INDEX_NAME = WHOOSH_INDEXES[0]
# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'j_kf(d2$3s%j3y%d9gsep-yg+vdn%cv_n2r5)p0ij#i!r#ssb8'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'app',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'webapp.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR,"templates")],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'webapp.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.1/howto/static-files/

STATIC_URL = '/static/'

# For indexing
def create_schema():
    """
    Function to create schema for the index to be created
    """
    schema = Schema(title=NGRAMWORDS(minsize=2,maxsize=4), name=ID(stored=True))
    return schema

def get_link_files():
    """
    Function to get the list of path of all the file to index

    :return: list of path
    """
    base_dir = WHOOSH_FILES+'/'
    link_files = []
    #printos.listdir(base_dir)
    for f in os.listdir(base_dir):
        link_files.append(base_dir + f)
    return link_files

def clean_index(dirname):
    """
    Function to create index from scratch
    :param dirname: path of the index_dir
    """
    ix = create_in(dirname, schema=create_schema(),indexname=WHOOSH_INDEX_NAME)
    writer = ix.writer()
    link_files = get_link_files()
    for path in link_files:
        add_doc(writer, path)
    #print'Committing :::'
    writer.commit()

def add_doc(writer, path):
    """
    Function to add documents to the index
    :param writer: the index writer
    :param path: path of the file to add to index
    """
    al = set()
    # ngram = NgramAnalyzer(minsize=2,stoplist=None)
    st = SimpleAnalyzer()
    #print'Opening ', path
    try:
        f_link = open(path, 'rb')
        stories_file = {'content':f_link.read().decode()}
        f_link.close()
        prev = None
    except IOError:
        print('Unable to read %s file' % path)
    else:
        for token in st(stories_file['content']):
            # if not token.text.isalpha():
            #     print("{}:{}".format(token.text,token.text.isalpha()))
            if token.text in al or (not only_letters(token.text)):
                continue
            al.add(token.text)
            print("{}\r".format(len(al)),end="")
            try:
                writer.update_document(title=token.text,name=token.text)
            except Exception as e:
                print(e)
if not exists_in(WHOOSH_INDEX,indexname=WHOOSH_INDEX_NAME):
    clean_index(WHOOSH_INDEX)
